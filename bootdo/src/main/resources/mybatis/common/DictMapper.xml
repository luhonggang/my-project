<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bootdo.common.dao.DictDao">

	<resultMap id="BaseResultMap" type="com.bootdo.common.domain.CustomerTask">
		<id column="task_id" jdbcType="INTEGER" property="taskId" />
		<id column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="order_no" jdbcType="VARCHAR" property="orderNo" />
		<result column="customer_id" jdbcType="INTEGER" property="customerId" />
		<result column="template_id" jdbcType="VARCHAR" property="templateId" />
		<result column="task_state" javaType="INTEGER" property="taskState"/>
		<result column="task_type" jdbcType="VARCHAR" property="taskType" />
		<result column="good_id" jdbcType="INTEGER" property="goodId" />
		<result column="good_link_url" jdbcType="VARCHAR" property="goodLinkUrl" />
		<result column="good_title" jdbcType="VARCHAR" property="goodTitle" />
		<result column="store_name" jdbcType="VARCHAR" property="storeName" />
		<result column="total_visitor" jdbcType="INTEGER" property="totalVisitor" />
		<result column="total_number" jdbcType="INTEGER" property="totalNumber" />
		<result column="task_time" jdbcType="VARCHAR" property="taskTime" />
		<result column="task_begin_hour" jdbcType="VARCHAR" property="taskBeginHour" />
		<result column="task_end_hour" jdbcType="VARCHAR" property="taskEndHour" />
		<result column="task_begin_miunte" jdbcType="VARCHAR" property="taskBeginMiunte" />
		<result column="task_end_miunte" jdbcType="VARCHAR" property="taskEndMiunte" />
		<result column="task_search_scope" jdbcType="VARCHAR" property="taskSearchScope" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
		<result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	</resultMap>

	<select id="get" resultType="com.bootdo.common.domain.CustomerTask">
		SELECT  task_id, template_id,task_type, task_state,good_id, good_link_url, good_title, store_name, total_visitor,
				total_number, task_time, task_begin_hour, task_end_hour, task_begin_miunte, task_end_miunte,
				task_search_scope, DATE_FORMAT(create_time,'%Y-%m-%d') as createTime, update_time
		FROM `customer_task` where task_id = #{taskId}
	</select>

	<select id="list" resultMap="BaseResultMap">
		SELECT  task.task_id , task.order_no,task.template_id ,task.task_type, task.task_state,task.good_id, task.good_link_url, task.good_title,
				task.store_name , task.total_visitor ,task.total_number , task.task_time, task.task_begin_hour, task.task_end_hour,task.task_begin_miunte, task.task_end_miunte,
				task.task_search_scope, DATE_FORMAT(task.create_time,'%Y-%m-%d') create_time ,task.update_time,cu.phone
		FROM `customer_task` task INNER JOIN customer cu ON cu.customer_id = task.customer_id
		<where>
			<if test="taskBeginTime != null and taskBeginTime != ''"> and task_time &gt;= #{taskBeginTime} </if>
			<if test="taskEndTime != null and taskEndTime != ''"> and task_time &lt;= #{taskEndTime} </if>
			<if test="taskType != null and taskType != ''"> and task_type = #{taskType} </if>
			<if test="taskState != null and taskState != ''"> and task_state = #{taskState} </if>
			<if test="goodId != null and goodId != ''"> and good_id = #{goodId} </if>
		</where>
		<!--<choose>
			<when test="taskEndTime != null and taskEndTime.trim() != ''">
				order by ${sort} ${order}
			</when>
			<otherwise>
				order by task_id DESC
			</otherwise>
		</choose>-->
		ORDER BY task_id DESC
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>

	<select id="count" resultType="int">
		SELECT  COUNT(*)
		FROM `customer_task`
		<where>
			<if test="taskBeginTime != null and taskBeginTime != ''"> and task_time &gt;= #{taskBeginTime} </if>
			<if test="taskEndTime != null and taskEndTime != ''"> and task_time &lt;= #{taskEndTime} </if>
			<if test="taskType != null and taskType != ''"> and task_type = #{taskType} </if>
			<if test="taskState != null and taskState != ''"> and task_state = #{taskState} </if>
			<if test="goodId != null and goodId != ''"> and good_id = #{goodId} </if>
		</where>

	</select>

	<insert id="save" parameterType="com.bootdo.common.domain.DictDO"
		useGeneratedKeys="true" keyProperty="id">
		insert into sys_dict
		(
		`name`,
		`value`,
		`type`,
		`description`,
		`sort`,
		`parent_id`,
		`create_by`,
		`create_date`,
		`update_by`,
		`update_date`,
		`remarks`,
		`del_flag`
		)
		values
		(
		#{name},
		#{value},
		#{type},
		#{description},
		#{sort},
		#{parentId},
		#{createBy},
		#{createDate},
		#{updateBy},
		#{updateDate},
		#{remarks},
		#{delFlag}
		)
	</insert>

	<update id="update" parameterType="com.bootdo.common.domain.CustomerTaskDto">
		update customer_task
		<set>
			<if test="taskState != null">
				task_state = #{taskState},
			</if>
			<if test="taskTime != null">
				task_time = #{taskTime},
			</if>
			<if test="updateTime != null">
				update_time = NOW(),
			</if>
		</set>
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>

	<delete id="remove">
		delete from sys_dict where id = #{value}
	</delete>

	<delete id="batchRemove">
		delete from sys_dict where id in
		<foreach item="id" collection="array" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</delete>

	<select id="listType" resultType="com.bootdo.common.domain.DictDO">
		select distinct `type` , description from sys_dict
	</select>

</mapper>